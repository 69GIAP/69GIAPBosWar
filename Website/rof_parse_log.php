<?PHP
// rof_parse_log.php 
// a simple-minded parser/stats/events reporter for combined RoF
// mission report textfiles
// written by =69.GIAP=TUSHKA
// 2011-2013
// Version 69GIAPBoSWar 0.4
// Thu Sep 19 2013
//

// the main program 

//record the starting time
$start=microtime();
$start=explode(" ",$start);
$start=$start[1]+$start[0];

// Begin Configuration - Edit these as needed.

// Debugging variables
$DEBUG = 0;  // set to 1 for a complete debugging report, 0 for off.
// 100 for START, 101 for HIT, 102 for DAMAGE, 103 for KILL,
// 104 for PLAYER_MISSION_END, 105 for TAKEOFF, 106 for LANDING,
// 107 for MISSION_END, 108 for MISSION_OBJECTIVE, 109 for AIRFIELD,
// 110 for PLAYERPLANE, 111 for GROUPINIT, 112 for GAMEOBJECTINVOLVED
// 113 for INFLUENCEAREA_HEADER, 114 for INFLUENCEAREA_BOUNDARY,
// 115 for VERSION (nothing yet for BOTID... haven't found its use)


// Get Individual variables from the campaign's campaign_settings table
$query = "SELECT * FROM campaign_settings";
if(!$result = $camp_link->query($query))
   { die('There was an error running the query [' . $camp_link->error . ']'); }
	
if ($result = mysqli_query($camp_link, $query)) {
	 // get results
	 while ($obj = mysqli_fetch_object($result)) {
		$SHOWAF	=($obj->show_airfield);
		$FinishFlightOnlyLanded = ($obj->finish_flight_only_landed);
		$map_locations	=($obj->map_locations);
		$LOGPATH	=($obj->logpath);
		$LOGFILE	=($obj->logfile);
	}
        // free result set
	mysqli_free_result($result);
}
// debugging
print "DEBUGGING: rof_parse_log.php parser configuration:<br>\n";
print "SHOWAF = $SHOWAF<br>\n";
print "FinishFlightOnlyLanded = $FinishFlightOnlyLanded<br>\n";
print "map_locations = $map_locations<br>\n";
print "LOGPATH = $LOGPATH<br>\n";
print "LOGFILE = $LOGFILE<br>\n";

// Declare global variables.
// This permits us to see these in functions without using them as
// arguments to the functions.  Lazy but effective!
global $camp_link;  // link to campaign db
global $map_locations;  // name of campaign locations file

// Set path to logfile relative to parser
$LOGFILE = $LOGPATH."/".$LOGFILE;

// End individual variables

//End Configuration
// Don't edit anything below this line unless you know what you are doing.

// initialize counting variables to zero
$numstart = 0 ; // number of starts (hopefully just 1)
$numhits = 0 ; // total number of hits
$numdamage = 0; // total number of damage events
$numkills = 0 ; // total number of kills
$numends = 0; // total number of mission end events
$numtakeoffs = 0 ; // total number of takeoffs
$numlandings = 0 ; // total number of landings
$numplayers = 0 ; // total number of players
$numgobjects = 0; // total number of game objects involved
$numevents = 0; // total number of events
$numgroups = 0; // total number of groups
$numB = 0; // number of boundary definitions
$numiaheaders = 0; // number of influence area headers

// require core functions called by the main program
// READLOG
require ('rof_parser/functions/coreREADLOG.php');
// PARSE
require ('rof_parser/functions/corePARSE.php');
// PROCESS
require ('rof_parser/functions/corePROCESS.php');
// OUTPUT
require ('rof_parser/functions/coreOUTPUT.php');

// now get to work
if (file_exists("$LOGFILE")) {
   // the main program is simple - only four stages
   READLOG($LOGFILE); // read the logfile
   PARSE($numlines); // parse the logfile 
   PROCESS($numlines); // manipulate the data to extract the stats we want
   OUTPUT(); // display a mission report
} else {
   echo("Could not open $LOGFILE");
}
// done
// record the ending time
$end=microtime();
$end=explode(" ",$end);
$end=$end[1]+$end[0];
//printf("<p>Page was generated by PHP %s in %f seconds</p>\n",phpversion(),$end-$start); 
printf("<p>Report generated in %.1f seconds</p>\n",$end-$start); 

// Thus endeth the main program - the remainder is just functions and a borrowed class.
// Of course all the interesting stuff happens in the functions and the borrowed class.

// FUNCTIONS (in roughly the order they are used)
// Then the functions that OUTPUT calls
// and finally OUTPUT itself

// FUNCTIONS called by OUTPUT (in alphabetical order):
// ACCURACY, ANORA, CLOCKTIME, COUNTRYNAME, CRASHED, DEAD, FATES,
// FLYING, GUNNER, LOSSES, OBJECTCOUNTRYNAME, OBJECTNAME, OBJECTTYPE,
// PLAYERNAME, TOFROM, WHERE,  WHOSEGUNNER, XYZ

function CRASHED($pid,$ticks) {
// determine if a player's plane has crashed by a given time
   global $numkills; // number of kills
   global $Kline; //  lines that define kills
   global $TID; // target ID
   global $Ticks; // time since start of mission in 1/50 sec ticks
   global $crashed; // player's plane has crashed, true or false

   $crashed = 0;
   for ($i = 0; $i < $numkills; ++$i) {
      $j = $Kline[$i];
      // if kill TID matches pid and time is at or after crash plane is crashed/destroyed at this time
//      echo "pid = $pid, ticks = $ticks, TID = $TID[$j], Ticks[$j] = $Ticks[$j]<br>\n";
      if (($TID[$j] == $pid) && ($ticks >= ($Ticks[$j] - 50))) { // 1 sec fudge-factor
         $crashed = 1;
      }
   }
//   echo "pid = $pid, ticks = $ticks, crashed = $crashed<br>\n";
}

function DEAD($pid,$ticks) {
// determine if a player is dead at a given time
   global $Death; // dead players numbers
   global $Deathticks; // ticks when died
   global $numplayers; // number of players
   global $numgobjects; // number of gameobjects
   global $Pline;  // lines that define players
   global $GOline; // lines defining game objects
   global $PID; // plane ID (whether bot or player)
   global $PLID; // player plane id 
   global $ID; // object ID
   global $Ticks; // time since start of mission in 1/50 sec ticks
   global $dead; // true or false

   $dead = 0;
   for ($i = 0; $i < $numgobjects; ++$i) {
      $j = $GOline[$i];
      for ($k = 0; $k < $numplayers; ++$k) {
         $l = $Pline[$k];
         if ($ID[$j] == $pid) { // if object ID matches plane ID
            // if playerplane ID matches plane ID and time is at or after death
            // player is dead at this time
            if (($PLID[$l] == $pid) && ($Deathticks[$k] == 0 )) {
               $dead = 0;
            } elseif (($PLID[$l] == $pid) && ($ticks >= $Deathticks[$k])) {
//            echo "pid = $pid, ticks = $ticks, dead = $dead, ID[$j] = $ID[$j], PLID[$l] = $PLID[$l], deathticks = $Deathticks[$k]<br>\n";
               $dead = 1;
            }
         }
      }
   }
//   echo "pid = $pid, ticks = $ticks, dead = $dead<br>\n";
}

function FATES($i,$j) {
   // $i is playernumber
   // $j is linenumber defining that player.
   global $COUNTRY; // country ID
   global $countryname; // country name
   global $CoalID; // coalition ID
   global $TYPE; // type of plane in this context
   global $anora; // an or a
   global $Gunner; // gunner type, if set
   global $Gunnerticks; // time became gunner
   global $Wound; // array holding severity of wound
   global $Woundticks; // ticks when last wounded
   global $Woundpos; // position where last wounded
   global $clocktime; // 24 hr time
   global $Death; // dead players numbers
   global $Deathticks; // ticks when died
   global $Deathpos; // position where died
   global $Eline; // lines that define mission ends
   global $numends; // number of mission ends
   global $posx; // X coordinate
   global $posz; // Z coordinate
   global $where; // position in english
   global $NAME; // player profile name
   global $numlandings; // number of landings
   global $numtakeoffs; // number of takeoffs
   global $Lline;  // landing lines
   global $Tline;  // takeoff lines
   global $PID; // plane ID (whether bot or player)
   global $PLID; // player plane id
   global $Ticks; // time since start of mission in 1/50 sec ticks
   global $POS; // position x,y,z
   global $FinishFlightOnlyLanded; // true or false setting

   // get "", "a" or "an" right for the plane
   ANORA($TYPE[$j]);
   $a = $anora;
   // get player's country name
   COUNTRYNAME($COUNTRY[$j]);
   // is this player a pilot or gunner?
   GUNNER($j);

   // if gunner, ignore wounds acquired before becoming this gunner
   if ($Gunner) {
      ANORA($Gunner);
      $ag = $anora;
      if ($Woundticks[$i] < $Gunnerticks) {
         $Wound[$i] = 0;
      }
   }

   // now print out the fate of the player
   if ($Death[$i]) { // player has been killed
      CLOCKTIME($Deathticks[$i]);
      XYZ($Deathpos[$i]);
      WHERE($posx,$posz,0);
      if ($Gunner) { //G1:
//         echo "Woundticks[$i] = $Woundticks[$i], Gunnerticks = $Gunnerticks<br>\n";
         echo "$NAME[$j] as $ag $Gunner for $countryname was killed at $clocktime $where<br>\n";
      } else { // not gunner so must be pilot
         echo "$NAME[$j] piloting $a $TYPE[$j] for $countryname was killed at $clocktime $where<br>\n";
      }
   } elseif ($Wound[$i]) { // player is alive but has been wounded
      CLOCKTIME($Woundticks[$i]);
      XYZ($Woundpos[$i]);
      WHERE($posx,$posz,0);
      // how seriously wounded?
      if ($Wound[$i] > .66) {
         $injuries = "critical injuries";
      }
      else if ($Wound[$i] > .33) {
         $injuries = "serious injuries";
      } else {
         $injuries = "minor injuries";
      }
      if ($Gunner) { //G2:
//         echo "Woundticks[$i] = $Woundticks[$i], Gunnerticks = $Gunnerticks<br>\n";
         echo "$NAME[$j] as $ag $Gunner for $countryname suffered $injuries at $clocktime $where<br>\n";
      } else { // not gunner so must be pilot
         echo "$NAME[$j] piloting $a $TYPE[$j] for $countryname suffered $injuries at $clocktime $where<br>\n";
      }
   }  else { // player is unwounded
      // loop through landings to report landing
//      echo "landing loop<br>\n";
      $landed = "";
      for ($k = 0; $k < $numlandings; ++$k) {
         $l = $Lline[$k];
         if ($PLID[$j] == $PID[$l]) {
            CLOCKTIME($Ticks[$l]);
            XYZ($POS[$l]);
            WHERE($posx,$posz,0);
//            echo "PID[$j] = $PID[$j], PLID[$j] = $PLID[$j], PID[$l] = $PID[$l]<br>\n";
            $landed = "landed at $clocktime $where";
         }
      } // end landing check

      if (($landed == "") && ($FinishFlightOnlyLanded)) {
//      echo "FD check<br>\n";
      // this is the "FD" check.  Twice in a row his landings were not reported.
      // loop through reported finishes... only possible if landed.
         for ($k = 0; $k < $numends; ++$k) {
            $l = $Eline[$k]; 
            if ($PLID[$j] == $PLID[$l]) {
               CLOCKTIME($Ticks[$l]);
               XYZ($POS[$l]);
               WHERE($posx,$posz,0);
//               echo "PLID[$j] = $PLID[$j], PLID[$j] = $PLID[$j]<br>\n";
               $landed = "landed at $clocktime $where";
            }
         }
      } // end FinishFlightOnlyLanded landing check

      if ($landed == "") { // player never landed
         // loop through takeoffs to make sure player took off
         $tookoff = 0;
         for ($k = 0; $k < $numtakeoffs; ++$k) {
            $l = $Tline[$k];
            if ($PLID[$j] == $PID[$l]) {
              $tookoff = 1;
            }
         }
         if ($tookoff == 0) { // player never took off
            $landed = "did not take off, surviving to fight another day";
         } else {
            $landed = "did not land";
         }
      } // end takeoff check

      if ($Gunner) { // gunners do not take off or land independently G3:
         echo "$NAME[$j] as $ag $Gunner for $countryname survived safe and sound<br>\n";
      } else { //  pilot player took off and landed
         echo "$NAME[$j] piloting $a $TYPE[$j] for $countryname $landed<br>\n";
      }
   } // end unwounded
} // end function

function FLYING($pid,$ticks) {
// determine whether a plane has taken off, etc
   global $numtakeoffs; // number of takeoffs
   global $Tline;  // takeoff lines
   global $PID; // plane ID (whether bot or player)
   global $Ticks; // time since start of mission in 1/50 sec ticks
   global $numlandings; // number of landings
   global $Lline;  // landing lines
   global $flying;  // on ground, flying, crashing, or already landed/crashed
   
   $flying = 0; // 0 hasn't moved, 1 flying, 2 crashing, 3 already landed/crashed
   // if plane hasn't taken off yet, or has already landed, it isn't flying
   // loop through takeoffs
   for ($i = 0; $i < $numtakeoffs; ++$i) {
      $j = $Tline[$i]; 
      if (($PID[$j] == $pid) && ($Ticks[$j] < $ticks)) { // plane has already taken off
         // loop through landings
         for ($k = 0; $k < $numlandings; ++$k) {
            $l = $Lline[$k];
            if (($PID[$j] == $pid) && ($Ticks[$j] > $ticks)) { // still in air
               $flying = 1;
            } elseif (($PID[$j] == $pid) && ($Ticks[$j] == $ticks)) { // landing/crashing
               $flying = 2;
            } elseif (($PID[$j] == $pid) && ($Ticks[$j] < $ticks)) { // landed/crashed
               $flying = 3;
            }
         } 
      }
   } 
//   echo "FLYING: $flying<br>\n";
// This only works for player pilots, not AI (takeoffs not recorded in log).
}

function GUNNER($j){
// given linenumber, determine if gunner and if so, what description to use
   global $TYPE; // type of plane, object, or objective - primary or secondary
   global $Ticks; // time since start of mission in 1/50 sec ticks - begins each log line
   global $numgobjects; // number of gameobjects
   global $GOline; // lines defining game objects
   global $PLID; // player plane id 
   global $ID; // object ID
   global $countryadj;  // adjective form of country name  
   global $Gunner; // gunner type, if set
   global $Gunnerticks; // time became gunner
   global $Log; // log lines (for debugging this one)
   $Gunner = ""; 
   $Gunnerticks = "";
   if (($TYPE[$j] == "TurretGothaG5_1") ||
      ($TYPE[$j] == "BotGunnerG5_1")) { // used in DFW also
      OBJECTCOUNTRYNAME($TID[$j],$Ticks[$j]);
      $Gunner = "$countryadj gunner";
   } elseif (($TYPE[$j] == "TurretGothaG5_2") ||
      ($TYPE[$j] == "BotGunnerG5_2")) { // used in DFW also
      $Gunner = "$countryadj gunner";
   } elseif (($TYPE[$j] == "TurretGothaG5_2_WM_Twin_Parabellum") ||
      ($TYPE[$j] == "TurretGothaG5_1_WM_Becker_AP")) { 
      $Gunner = "Gotha G.V gunner";
   } elseif ($TYPE[$j] == "BotGunnerBacker") { // is this used elsewhere?
      $Gunner = "Gotha G.V gunner";
   } elseif ($TYPE[$j] == "BotGunnerBW12") {
      $Gunner = "Brandenburg W12 gunner";
   } elseif ($TYPE[$j] == "TurretHalberstadtCL2_1") {
      $Gunner = "Halberstadt CL.II gunner";
   } elseif ($TYPE[$j] == "TurretHalberstadtCL2au_1_WM_TwinPar") {
      $Gunner = "Halberstadt CLIIau gunner";
   } elseif ($TYPE[$j] == "BotGunnerHCL2") {
      $Gunner = "Halberstadt CL.II gunner";
   } elseif ($TYPE[$j] == "BotGunnerDavis") {
      $Gunner = "$countryadj Davis gunner";
   } elseif ($TYPE[$j] == "BotGunnerFe2_sing") {
      $Gunner = "$countryadj F.E.2b gunner";
   } elseif (($TYPE[$j] == "TurretHP400_1") || ($TYPE[$j] == "TurretHP400_1_WM") ||
      ($TYPE[$j] == "BotGunnerHP400_1")) { // just a guess as to which gunner is which - edit if needed
      $Gunner = "Handley Page 0/400 nose gunner";
   } elseif (($TYPE[$j] == "TurretHP400_2") ||
      ($TYPE[$j] == "BotGunnerHP400_2") || ($TYPE[$j] == "BotGunnerHP400_2_WM") || ($TYPE[$j] == "TurretHP400_2" ) || ($TYPE[$j] == "TurretHP400_2_WM")) { // just a guess as to which gunner is which - edit if needed
      $Gunner = "Handley Page 0/400 dorsal gunner";
   } elseif (($TYPE[$j] == "TurretHP400_3") ||
      ($TYPE[$j] == "BotGunnerHP400_3")) { // just a guess as to which gunner is which - edit if needed
      $Gunner = "Handley Page 0/400 ventral gunner";
   } elseif ($TYPE[$j] == "TurretDFWC_1") {
      $Gunner = "DFW C.V gunner";
   } elseif ($TYPE[$j] == "TurretDFWC_1_WM_Twin_Parabellum") {
      $Gunner = "DFW C.V gunner";
   } elseif ($TYPE[$j] == "TurretDFWC_1_WM_Becker_HEAP") {
      $Gunner = "DFW C.V gunner";
   } elseif (($TYPE[$j] == "TurretBreguet14_1") ||
      ($TYPE[$j] == "BotGunnerBreguet14_1")) { // also used in Bristol and F.E.2b
      $Gunner = "$countryadj Breguet 14.B2 gunner";
   } elseif ($TYPE[$j] == "TurretBristolF2B_1") {
      $Gunner = "Bristol F2.B gunner";
   } elseif ($TYPE[$j] == "TurretBristolF2BF2_1_WM2") {
      $Gunner = "Bristol F2.B gunner";
   } elseif ($TYPE[$j] == "TurretBristolF2BF3_1_WM2") {
      $Gunner = "Bristol F2.B gunner";
   } elseif ($TYPE[$j] == "TurretRE8_1") {
      $Gunner = "R.E.8 gunner";
   } elseif ($TYPE[$j] == "TurretRE8_1_WM2") {
      $Gunner = "R.E.8 gunner";
   } elseif ($TYPE[$j] == "TurretDH4_1_WM") {
      $Gunner = "D.H.4 gunner";
   } elseif ($TYPE[$j] == "TurretDH4_1") {
      $Gunner = "D.H.4 gunner";
   } elseif ($TYPE[$j] == "TurretFe2b_1") {
      $Gunner = "F.E.2b gunner";
   } elseif ($TYPE[$j] == "TurretFe2b_1_WM") {
      $Gunner = "F.E.2b gunner";
   } elseif ($TYPE[$j] == "TurretFelixF2A_2") {
      $Gunner = "Felixstowe F2A gunner";
   } elseif ($TYPE[$j] == "TurretFelixF2A_3") {
      $Gunner = "Felixstowe F2A gunner";
   } elseif ($TYPE[$j] == "TurretFelixF2A_3_WM") {
      $Gunner = "Felixstowe F2A gunner";
   } elseif ($TYPE[$j] == "BotGunnerFelix_top-twin") {
      $Gunner = "Felixstowe F2A top gunner";
   } elseif ($TYPE[$j] == "TurretBW12_1_WM_Twin_Parabellum") {
      $Gunner = "Brandenburg W12 gunner";
   } elseif ($TYPE[$j] == "TurretRolandC2a_1") {
      $Gunner = "Roland C.IIa gunner";
   } elseif ($TYPE[$j] == "TurretRolandC2a_1_WM_TwinPar") {
      $Gunner = "Roland C.IIa gunner";
   } elseif ($TYPE[$j] == "BotGunnerRE8") {
      OBJECTCOUNTRYNAME($TID[$j],$Ticks[$j]);
      $Gunner = "$countryadj gunner";
   }
   if ($Gunner) { 
   // Gunnerticks may not be doing what it is expected to.  May need to redefine it.
   // yes.. should use time from GAMEOBJECTINVOLVED, not current time.
   // match PLID of current PLAYERPLANE line to ID of GAMEOBJECTINVOLVED
   // and take time from there
   // still not convinced I have it right.
//      $Gunnerticks = $Ticks[$j]; 
//      echo "GUNNER: $Log[$j]<br>\n";
      for ($i = 0; $i < $numgobjects; ++$i) {
         $k = $GOline[$i];
         if ($PLID[$j] == $ID[$k]) { // if player ID matches gameobject ID
            $Gunnerticks = $Ticks[$k];
// echo "GUNNER: TYPE[$j] = $TYPE[$j], Ticks[$j] = $Ticks[$j], GUNNER = $Gunner, PLID[$j] = $PLID[$j], ID[$k] = $ID[$k], Gunnerticks = $Gunnerticks<br>\n";
         }
      }
   }

//    echo "GUNNER: linenum = $j TYPE = $TYPE[$j], Gunner = $Gunner<br>\n";
}

function LANDINGSIDE($pid,$posx,$posz){
// determine if player landed on friendly or enemy territory
   global $PLID; // player plane id 
   global $numplayers; // number of players
   global $Pline;  // lines that define players
   global $COUNTRY; // country ID
   global $CoalID; // coalition ID
   global $numiaheaders; // number of influence area headers
   global $IAHline; // lines defining Influence Area Headers
   global $numB; // number of boundary definitions
   global $Bline; // lines defining area boundaries
   global $AID; // area ID in this context
   global $BoundaryArray; // array of point pairs defining a boundary
   global $side; // "friendly", "enemy" or "neutral"

   // format location the way the pointLocation class needs
   $location = "$posx $posz";

   // get player's country from PLAYERPLANE lines
   // loop through PLAYERPLANE lines to get the country.
   for ($i = 0; $i < $numplayers; ++$i) {
      $j = $Pline[$i];
      if ( $pid == $PLID[$j] ) {
        $pcountry = $COUNTRY[$j];
      }
   }

   // get playerplane's coalition
   COALITION($pcountry); 
   $pcoalition = $CoalID;
//   echo "LANDINGSIDE A: pcountry = $pcountry, pcoalition = $pcoalition<br>\n";

   // get influence areas' countries and coalitions 
   // get  country of each area
   for ($i = 0; $i < $numB; ++$i) {
      $j = $Bline[$i];
      for ($k = 0; $k < $numB; ++$k) {  // peek at first two IAHlines
         $l = $IAHline[$k];
//         echo "LANDINGSIDE B0: i = $i, AreaID[$i] = $AID[$j]<br>\n";
//         echo "LANDINGSIDE B0.1:  IAHeader AreaID[$i] = $AID[$l]<br>\n";
         if ($AID[$j] == $AID[$l]) {
//            echo "LANDINGSIDE B0.2:   $AID[$j] = $AID[$l]<br>\n";
//            echo "LANDINGSIDE B0.3:   k=$k, l=$l, COUNTRY[l]=$COUNTRY[$l]<br>\n";
            if (isset($COUNTRY[$l])) {
               @$acountry[$k] == $COUNTRY[$l]; // @ suppresses notices
               COALITION($COUNTRY[$l]);   
               $acoalition[$k] = $CoalID;
            }
         }
      }
//      echo "LANDINGSIDE B1: i = $i, AreaID[$i] = $AID[$j]<br>\n";
//      echo "LANDINGSIDE B2: areacountry[$i] = $acluntry[$i], acoalition[$i] = $acoalition[$i]<br>\n";
   }

   // New logic
   // loop through defined boundaries using the $numB index

   for ($i = 0; $i < $numB; ++$i) {
      // define the current polygon
      $polygon = $BoundaryArray[$i];

      // Now test whether landed inside this polygon
// in situ test: "20 20" is "inside" this polygon
//$polygon = array("10 0", "0 10", "0 20", "10 30", "20 30", "30 20", "30 10", "20 0", "10 0");
//$location = "20 20";
      $pointLocation = new pointLocation();
 //              echo "($location) is " . $pointLocation->pointInPolygon($location, $polygon) . "<br>";
      $place = $pointLocation->pointInPolygon($location, $polygon);

      // interpret result
      if ($place == "inside") {
//         echo "i = $i ,LANDINGSIDE reports inside.<br>\n";
         if ($pcoalition == $acoalition[$i]) {
            $side = "friendly"; 
            $i = $numB; // we are done
            $k = $numB; // we are done
         } else {
            $side = "enemy"; 
            $i = $numB; // we are done
            $k = $numB; // we are done
         }
      } else { // if not in either area, must be neutral
            $side = "neutral"; // but keep checking until done
      }
   }
//   echo "LANDINGSIDE reports $side<br>\n";
}

function LOSSES($i) {
   // $i is kill number
   global $Kline; //  lines that define kills
   global $Ticks; // time since start of mission in 1/50 sec ticks
   global $clocktime; // 24 hr time
   global $ID; // object ID
   global $TID; // target ID
   global $AID; // attacker ID in this context
   global $POS; // position x,y,z
   global $objecttype; // object type from PID/AID/TID
   global $objectname; // object name from PID/AID/TID
   global $playername; // player name from PLID
   global $countryadj;  // adjective form of country name
   global $anora; // an or a
   global $numgobjects; // number of game objects involved
   global $GOline; // lines defining game objects

   $j = $Kline[$i];
   CLOCKTIME($Ticks[$j]);
   OBJECTTYPE($TID[$j],$Ticks[$j]);
   PLAYERNAME($TID[$j],$Ticks[$j]);
   OBJECTNAME($TID[$j],$Ticks[$j]);
   OBJECTCOUNTRYNAME($TID[$j],$Ticks[$j]);
//   echo "$i in line # $j, $AID[$j] $TID[$j] in $POS[$j]<br>\n";
//   echo "objecttype = $objecttype, playername = $playername, objectname = $objectname<br>\n";
   ANORA($countryadj);
   $a = $anora;
   // get objectnumber for target object
   for ($k = 0; $k < $numgobjects; ++$k) {
      $l = $GOline[$k];
      if ($ID[$l] == $TID[$j]) {
         $tonum = $k;
      }
   }
//   echo "flying = $flying<br>\n";
//   echo "attackertype = $attackertype, attackerobject = $attackerobject, aplayername= $aplayername, objecttype = $objecttype, playername = $playername, objectname = $objectname<br>\n";
   if ("$objectname" == "Common Bot")  {
      $objectname = $playername;
      echo ("$clocktime  $countryadj pilot $objectname<br>\n");
   } elseif ($objecttype == "BotGunnerG5_1") { // used in DFW also
      echo ("$clocktime $a $countryadj gunner ($playername)<br>\n");
   } elseif ($objecttype == "BotGunnerG5_2") { // used in DFW also
      echo ("$clocktime $a $countryadj gunner ($playername)<br>\n");
   } elseif ($objecttype == "BotGunnerDavis") { // used in HP and Felixstow
      echo ("$clocktime $a $countryadj Davis gunner ($playername)<br>\n");
   } elseif ($objecttype == "BotGunnerFe2_sing") {
      echo ("$clocktime $a $countryadj F.E.2b gunner ($playername)<br>\n");
   } elseif ($objecttype == "BotGunnerHP400_1") {
      echo ("$clocktime $a $countryadj nose gunner ($playername)<br>\n"); // also used in Felixstowe F2A
   } elseif ($objecttype == "BotGunnerBacker") {
      echo ("$clocktime $a $countryadj Gotha G.V gunner ($playername)<br>\n");
   } elseif ($objecttype == "BotGunnerBW12") {
      echo ("$clocktime $a $countryadj Brandenburg W12 gunner ($playername)<br>\n");
   } elseif ($objecttype == "BotGunnerHCL2") {
      echo ("$clocktime $a $countryadj Halberstadt CL.II gunner ($playername)<br>\n");
   } elseif ($objecttype == "BotGunnerHP400_2") {
      echo ("$clocktime $a $countryadj Handley Page 0/400 dorsal gunner ($playername)<br>\n");
   } elseif ($objecttype == "BotGunnerHP400_2_WM") {
      echo ("$clocktime $a $countryadj Handley Page 0/400 dorsal gunner ($playername)<br>\n");
   } elseif ($objecttype == "BotGunnerHP400_3") {
      echo ("$clocktime $a $countryadj Handley Page 0/400 ventral gunner ($playername)<br>\n");
   } elseif ($objecttype == "BotGunnerBreguet14") { // also used in Bristol F2B and F.E.2b
      echo ("$clocktime $a $countryadj gunner ($playername)<br>\n");
   } elseif ($objecttype == "BotGunnerRE8") {
      echo ("$clocktime $a $countryadj gunner ($playername)<br>\n");
   } elseif ($objecttype == "BotGunnerFelix_top-twin") {
      echo ("$clocktime $a $countryadj Felixstowe F2A top gunner ($playername)<br>\n");
   } elseif (preg_match('/^British/',$objecttype)) { // don't need $countryadj
   echo ("$clocktime $a $objecttype ($objectname)<br>\n");
   } elseif (preg_match('/^German/',$objecttype)) { // don't need $countryadj
   echo ("$clocktime $a $objecttype ($objectname)<br>\n");
   } elseif ($objecttype == "ship_stat_pass") {
   echo ("$clocktime $a stationary $countryadj passenger ship ($objectname)<br>\n");
   } elseif ($objecttype == "GER submarine") {
   echo ("$clocktime $a surfaced $countryadj submarine ($objectname)<br>\n");
   } elseif ($objecttype == "GER Ship Searchlight") {
   echo ("$clocktime $a $countryadj ship searchlight ($objectname)<br>\n");
   } elseif ($objecttype == "GBR Searchlight") {
   echo ("$clocktime $a $countryadj searchlight ($objectname)<br>\n");
   } elseif ($objecttype == "ship_stat_cargo") {
   echo ("$clocktime $a stationary $countryadj cargo ship ($objectname)<br>\n");
   } elseif ($objecttype == "ship_stat_tank") {
   echo ("$clocktime $a stationary $countryadj tanker ship ($objectname)<br>\n");
   } elseif ($objecttype == "ger_med") {
   echo ("$clocktime $a $countryadj airfield ($objectname)<br>\n");
   } else {
   echo ("$clocktime $a $countryadj $objecttype ($objectname)<br>\n");
   }
//  echo ("C* $clocktime $attackertype $attackername $aplayername $objecttype $objectname $playername<br>\n");
}

#function OBJECTCOUNTRYNAME ($id,$ticks) {
#// given ID, find a game object's country name
#   global $numgobjects; // number of game objects involved
#   global $GOline; // lines defining game objects
#   global $ID; // object ID
#   global $Ticks; // time since start of mission in 1/50 sec ticks
#   global $COUNTRY; // country ID
#   global $countryid; // country id
#
#   for ($i = 0; $i < $numgobjects; ++$i) {
#      $j = $GOline[$i];
#      if (($ID[$j] == $id ) && ($Ticks[$j] <= $ticks)) {
#         $countryid = $COUNTRY[$j];
#      }
#//      echo "id = $id, ID[$j] = $ID[$j], ticks = $ticks, Ticks[$j] = $Ticks[$j]<br>\n";
#   }
#   COUNTRYNAME($countryid);
#}


function OBJECTNAME ($id,$ticks) {
// given ID, find an object's name
   global $numlines; // number of log lines
   global $AType; // category of information contained in this line
   global $Ticks; // time since start of mission in 1/50 sec ticks
   global $ID; // object ID
   global $NAME; // player profile name
   global $TYPE; // type object in this context
   global $objectname; // object name from PID/AID/TID
   global $numgobjects; // number of game objects involved
   global $GOline; // lines defining game objects
   
   // T:36590 AType:12 ID:223250 TYPE:Albatros D.III COUNTRY:501 NAME:Plane PID:-1^M
   $found = "0";
   $objectname = "";
   if ( $id == "-1") {
      $objectname = "Intrinsic";
      $found = "1";
   }
   else { 
      for ($i = 0; $i < $numgobjects; ++$i) {
         $j = $GOline[$i];
         if (("$AType[$j]" == "12") && ("$ID[$j]" == "$id") && ($Ticks[$j] <= $ticks)) {
            $objectname = "$NAME[$j]";
            $found = "1";
            if ($NAME[$j] == "") { 
               $objectname = "$TYPE[$j]";
//               echo "OBJECTNAME: blank NAME, objectname = $objectname<br>\n";
            }
//            echo "OBJECTNAME: id = $id, Ticks[$j] = $Ticks[$j], ticks = $ticks, NAME = $NAME[$j], objectname = $objectname, found = $found<br>\n";
         }
      }
   }
   if (!$found) {
      $objectname = "";
   }
}


function OBJECTTYPE ($id,$ticks) {
// get object TYPE from ID
   global $Ticks; // time since start of mission in 1/50 sec ticks
   global $ID; // object ID
   global $TYPE; // type of object in this context
   global $objecttype; // object type from PID/AID/TID
   global $numgobjects; // number of game objects involved
   global $GOline; // lines defining game objects
   
   // T:36590 AType:12 ID:223250 TYPE:Albatros D.III COUNTRY:501 NAME:Plane PID:-1^M
   $objecttype = "";
   $found = "0";
   for ($i = 0; $i < $numgobjects; ++$i) {
      $j = $GOline[$i];
      if (("$ID[$j]" == "$id") && ($Ticks[$j] <= $ticks)) {
         $objecttype = $TYPE[$j];
         $found = "1";
      }
   }
   if ( $id == "-1") {
      $objecttype = "Intrinsic";
   } elseif (!$found) {
      $objecttype = "Uknown Object";
   }
}

function PLAYERNAME($plid,$ticks) {
// get player's name from PLID
// may call OBJECTNAME
   global $PLID; // player plane id 
   global $PID; // plane ID (whether bot or player)
   global $NAME; // player profile name
   global $numplayers; // number of players
   global $Pline;  // lines that define players
   global $objectname; // object name from PID/AID/TID
   global $playername; // player name from PLID

   $playername = "";
   $found = "0";
   if ($plid == "-1") {
      $playername = "Intrinsic";
      $found = "1";
//      echo "PLAYERNAME 1- playername = $playername<br>\n"; 
   } else {
      for ($i = 0; $i < $numplayers; ++$i) {
         $j = $Pline[$i];
//         if ("$PLID[$j]" == "$plid")) {
         if (("$PLID[$j]" == "$plid") || ("$PID[$j]" == "$plid")) {
            $playername = $NAME[$j];
            $found = "1";
//            echo "PLAYERNAME 2- playername = $playername<br>\n"; 
         }
      }
   }
   if (!$found) {
      $objectname = "";
      OBJECTNAME($plid,$ticks);
      $playername = $objectname;
      $found = "1";
//      echo "PLAYERNAME 3- playername = $playername<br>\n"; 
   }
}

function TOFROM($where) {
// massage $where string to show takeoff "from" rather than "at" or "next to"
   global $where; // position in english

   $where = preg_replace("/^at/", "from", $where);
   $where = preg_replace("/next to/", "from", $where);
}

function WHERE($x,$z,$fieldonly) {
// find closest location and vaguely describe distance from it
// if $fieldonly is 1 check airfields only
   global $camp_link;  // link to campaign db
   global $map_locations;  // name of campaign locations file
   global $Locs; // locations
   global $playername; // player name from PLID
   global $numlocs; // number of locations
   global $LID; // location ID
   global $LX; // location X coordinate
   global $LZ; // location Z coordinate
   global $LName; // location name
   global $where; // position in english
   global $SHOWAF; // Show airfield names (binary)

   // set starting conditions
   $mindist = 20001; // 20 km plus a meter
   $minname = "";
   $mintype = 0;
   $minfield = "";

//   $query = "SELECT * FROM '$map_locations'";
   $query = "SELECT * FROM $map_locations";
   // if no result report error  (could do this as an 'else' clause also)
   if(!$result = $camp_link->query($query)) {
      die('There was an error running the query [' . $camp_link->error . ']');
   }

// find closest location using brute force... only 660/743 locations to check.  :)
 // Tried to see if restricting calculations to a certain square helped any.
 // It didn't :)
   if ($fieldonly) {
      if ($result = mysqli_query($camp_link, $query)) {
         while ($obj = mysqli_fetch_object($result)) {
            $LID=($obj->LID);
            $LX	=($obj->LX);
            $LZ	=($obj->LZ);
            $LName =($obj->LName);

	    // check airfields only
            if (( $LID == "10" ) || ( $LID == "20" )) {
	       // check if this location is closer
               $distance = sqrt(pow($x -$LX,2) + pow($z - $LZ,2));
               if ( $mindist > $distance) {
                  $mintype = $LID;
                  $mindist = $distance;
                  $minname = $LName;
//                 echo "$mindist from $LName<br>\n";
	       }
	    }
         }
      }
   } else {
      if ($result = mysqli_query($camp_link, $query)) {
         while ($obj = mysqli_fetch_object($result)) {
            $LID=($obj->LID);
            $LX	=($obj->LX);
            $LZ	=($obj->LZ);
            $LName =($obj->LName);

	    // check if this location is closer
            $distance = sqrt(pow($x -$LX,2) + pow($z - $LZ,2));
            if ( $mindist > $distance) {
               $mintype = $LID;
               $mindist = $distance;
               $minname = $LName;
//               echo "$mindist from $LName<br>\n";
	    }
         }
      }
   }
   // free result set
   mysqli_free_result($result);

   //echo "$mindist from $minname<br>\n";
   // translate distances into appropriate but vague modifiers
   if ($mindist < 750) { $desc = "at"; }
   elseif ($mindist < 1500.0) { $desc = "next to"; }
   elseif ($mindist < 2500.0) { $desc = "near"; }
   elseif ($mindist < 5000.0) { $desc = "within sight of"; }
   elseif ($mindist < 10000.0) { $desc = "a good way from"; }
   elseif ($mindist < 20000.0) { $desc = "far from"; }
   else { $desc = "in the middle of nowhere"; }
   // if small airfield or regular airfield add airfield to location name
   if ( $mindist >= 20000.0 ) {
     $where = $desc;
   } elseif (( $mintype == "10" ) || ( $mintype == "20" )) {
     if ($SHOWAF) { 
       $where = $desc . " " . $minname . "airfield";
     } else {
       $where = $desc . " " . "an undisclosed airfield";
     }
   } else {
     $where = $desc . " " . $minname;
   }
//   echo "$desc<br>";
}

function WHOSEGUNNER($id) {
// no longer used?
// given gunner id, find player name
   global $ID; // object ID
   global $PID; // plane ID (whether bot or player)
   global $PLID; // player plane id 
   global $NAME; // player profile name
   global $numgobjects; // number of game objects involved
   global $GOline; // lines defining game objects
   global $numplayers; // number of players
   global $Pline;  // lines that define players
   global $Whosegunner; // player piloting this gunner
   
   $pid = 0;
   $Whosegunner = "";
   for ($i = 0; $i < $numgobjects; ++$i) {
      $j = $GOline[$i];
      if ($id == $ID[$j]) {
         $pid = $PID[$j];
         for ($k = 0; $k < $numplayers; ++$k) {
            $l = $Pline[$k];
            if ($pid == $PLID[$l]) {
               $Whosegunner = "$NAME[$l]'s";
            }
         } 
      }
   }
   if ($Whosegunner == "")
      {
         $Whosegunner = "an unpiloted plane's AI";
      }
//  echo "WHOSEGUNNER: ID=$id, PID = $pid whosegunner = $Whosegunner<br>\n";
}

function XYZ($POS) {
// Break POS into X, Y and Z.
   global $posx; // X coordinate
   global $posy; // Y coordinate (altitude)
   global $posz; // Z coordinate

   // remove slashes and spaces
   $POS = preg_replace("/\(/","",$POS);
   $POS = preg_replace("/\)/","",$POS);
   $POS = preg_replace("/ /","",$POS);
   $Part = explode(",",$POS,3); // split into X, Y and Z at ","
   $posx = trim($Part[0]);
   $posy = trim($Part[1]);
   $posz = trim($Part[2]);
}
// end of FUNCTIONS called by OUTPUT

?>
